cmake_minimum_required(VERSION 3.8)
project(robotname_localization)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
# uncomment the following section in order to fill in
# further dependencies manually.
# find_package(<dependency> REQUIRED)

find_package(rclcpp REQUIRED)
find_package(nav_msgs REQUIRED)
find_package(tf2 REQUIRED)
find_package(sensor_msgs REQUIRED)
find_package(message_filters REQUIRED)
find_package(tf2_geometry_msgs REQUIRED)
add_executable(
  filterlidar
  src/filterlidar.cpp)

ament_target_dependencies(filterlidar 
rclcpp 
sensor_msgs 
nav_msgs 
message_filters
tf2
tf2_geometry_msgs
)
add_executable(
  lidarreference
  src/lidarreference.cpp)

ament_target_dependencies(lidarreference 
rclcpp 
sensor_msgs 
nav_msgs 
tf2
tf2_geometry_msgs
tf2_ros
)
install(TARGETS
  filterlidar
  lidarreference
  DESTINATION lib/${PROJECT_NAME})

install(
  DIRECTORY launch config 
  DESTINATION share/${PROJECT_NAME}
)

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # comment the line when a copyright and license is added to all source files
  set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # comment the line when this package is in a git repo and when
  # a copyright and license is added to all source files
  set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()

ament_package()
